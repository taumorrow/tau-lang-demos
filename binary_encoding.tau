# Title: Binary Encoding Test Program
# Description: A focused test program that demonstrates how to represent and manipulate
# numerical values using binary encoding in Tau's boolean-only environment.

# === BINARY NUMBER INPUTS ===
# We'll use two 4-bit binary numbers as input
# Number A (4 bits)
sbf aBit0 = ifile("number_a_bit0.in")  # LSB
sbf aBit1 = ifile("number_a_bit1.in")
sbf aBit2 = ifile("number_a_bit2.in")
sbf aBit3 = ifile("number_a_bit3.in")  # MSB

# Number B (4 bits)
sbf bBit0 = ifile("number_b_bit0.in")  # LSB
sbf bBit1 = ifile("number_b_bit1.in")
sbf bBit2 = ifile("number_b_bit2.in")
sbf bBit3 = ifile("number_b_bit3.in")  # MSB

# === BINARY OPERATION OUTPUTS ===
# Addition: A + B (5 bits to handle overflow)
sbf addBit0 = ofile("sum_bit0.out")  # LSB
sbf addBit1 = ofile("sum_bit1.out")
sbf addBit2 = ofile("sum_bit2.out")
sbf addBit3 = ofile("sum_bit3.out")
sbf addBit4 = ofile("sum_bit4.out")  # Overflow bit

# Comparison operations
sbf equals = ofile("a_equals_b.out")        # A == B
sbf greater = ofile("a_greater_than_b.out") # A > B
sbf less = ofile("a_less_than_b.out")       # A < B

# Increment: A + 1 (5 bits to handle overflow)
sbf incBit0 = ofile("a_plus_1_bit0.out")  # LSB
sbf incBit1 = ofile("a_plus_1_bit1.out")
sbf incBit2 = ofile("a_plus_1_bit2.out")
sbf incBit3 = ofile("a_plus_1_bit3.out")
sbf incBit4 = ofile("a_plus_1_bit4.out")  # Overflow bit

# Decrement: A - 1 (4 bits)
sbf decBit0 = ofile("a_minus_1_bit0.out")  # LSB
sbf decBit1 = ofile("a_minus_1_bit1.out")
sbf decBit2 = ofile("a_minus_1_bit2.out")
sbf decBit3 = ofile("a_minus_1_bit3.out")  # MSB

# === BINARY ADDER IMPLEMENTATION ===

# Half adder - used for adding two bits without carry-in
r halfAdderSum[a, b] := a + b  # XOR operation
r halfAdderCarry[a, b] := a & b  # AND operation

# Full adder - used for adding two bits with carry-in
r fullAdderSum[a, b, cIn] := a + b + cIn  # Triple XOR
r fullAdderCarry[a, b, cIn] := (a & b) | (a & cIn) | (b & cIn)

# === ADDITION OPERATION ===
# Add A and B using full adders

# Bit 0 (LSB)
r addBit0[t] = halfAdderSum[aBit0[t], bBit0[t]]
r carry0[t] = halfAdderCarry[aBit0[t], bBit0[t]]

# Bit 1
r addBit1[t] = fullAdderSum[aBit1[t], bBit1[t], carry0[t]]
r carry1[t] = fullAdderCarry[aBit1[t], bBit1[t], carry0[t]]

# Bit 2
r addBit2[t] = fullAdderSum[aBit2[t], bBit2[t], carry1[t]]
r carry2[t] = fullAdderCarry[aBit2[t], bBit2[t], carry1[t]]

# Bit 3
r addBit3[t] = fullAdderSum[aBit3[t], bBit3[t], carry2[t]]
r addBit4[t] = fullAdderCarry[aBit3[t], bBit3[t], carry2[t]]  # Overflow bit

# === COMPARISON OPERATIONS ===

# Equal bits at each position
r eqBit0[t] = (aBit0[t] & bBit0[t]) | (aBit0[t]' & bBit0[t]')
r eqBit1[t] = (aBit1[t] & bBit1[t]) | (aBit1[t]' & bBit1[t]')
r eqBit2[t] = (aBit2[t] & bBit2[t]) | (aBit2[t]' & bBit2[t]')
r eqBit3[t] = (aBit3[t] & bBit3[t]) | (aBit3[t]' & bBit3[t]')

# A equals B if all bits are equal
r equals[t] = eqBit0[t] & eqBit1[t] & eqBit2[t] & eqBit3[t]

# A greater than B logic
# Check each bit position, starting from MSB
r gtBit3[t] = aBit3[t] & bBit3[t]'
r gtBit2[t] = eqBit3[t] & aBit2[t] & bBit2[t]'
r gtBit1[t] = eqBit3[t] & eqBit2[t] & aBit1[t] & bBit1[t]'
r gtBit0[t] = eqBit3[t] & eqBit2[t] & eqBit1[t] & aBit0[t] & bBit0[t]'

# A is greater if any of these conditions is true
r greater[t] = gtBit3[t] | gtBit2[t] | gtBit1[t] | gtBit0[t]

# A less than B is true if A is not equal to B and A is not greater than B
r less[t] = equals[t]' & greater[t]'

# === INCREMENT OPERATION (A + 1) ===
# This adds 1 to number A

# Constant 1 is represented as: 0001
r constBit0[t] = 1  # LSB
r constBit1[t] = 0
r constBit2[t] = 0
r constBit3[t] = 0  # MSB

# Use the adder logic to add 1 to A
r incBit0[t] = halfAdderSum[aBit0[t], constBit0[t]]
r carryInc0[t] = halfAdderCarry[aBit0[t], constBit0[t]]

r incBit1[t] = fullAdderSum[aBit1[t], constBit1[t], carryInc0[t]]
r carryInc1[t] = fullAdderCarry[aBit1[t], constBit1[t], carryInc0[t]]

r incBit2[t] = fullAdderSum[aBit2[t], constBit2[t], carryInc1[t]]
r carryInc2[t] = fullAdderCarry[aBit2[t], constBit2[t], carryInc1[t]]

r incBit3[t] = fullAdderSum[aBit3[t], constBit3[t], carryInc2[t]]
r incBit4[t] = fullAdderCarry[aBit3[t], constBit3[t], carryInc2[t]]

# === DECREMENT OPERATION (A - 1) ===
# This subtracts 1 from number A
# In binary, A-1 can be computed by flipping all bits after the rightmost 1

# Find the rightmost 1 in A
r rightmost1Bit0[t] = aBit0[t]
r rightmost1Bit1[t] = aBit1[t] & aBit0[t]'
r rightmost1Bit2[t] = aBit2[t] & aBit1[t]' & aBit0[t]'
r rightmost1Bit3[t] = aBit3[t] & aBit2[t]' & aBit1[t]' & aBit0[t]'

# Compute A - 1
r decBit0[t] = aBit0[t]'
r decBit1[t] = aBit1[t] + rightmost1Bit0[t]
r decBit2[t] = aBit2[t] + (rightmost1Bit0[t] | rightmost1Bit1[t])
r decBit3[t] = aBit3[t] + (rightmost1Bit0[t] | rightmost1Bit1[t] | rightmost1Bit2[t])